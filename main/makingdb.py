from distutils.sysconfig import customize_compiler
from pip import main
import psycopg2
import json
import asyncio
import asyncpg
import datetime as dt

example = {
    'lastUpdateId': 15316254032,
     'bids': [['2529.55000000', '6.60570000'], ['2529.53000000', '0.23000000'], ['2529.49000000', '0.07250000'], ['2529.41000000', '0.04420000'], ['2529.39000000', '0.19810000'], ['2529.34000000', '0.01580000'], ['2529.33000000', '1.19180000'], ['2529.32000000', '3.04500000'], ['2529.31000000', '0.22110000'], ['2529.18000000', '0.81140000'], ['2529.17000000', '0.06970000'], ['2529.10000000', '0.91870000'], ['2529.09000000', '0.75000000'], ['2529.03000000', '3.45720000'], ['2529.02000000', '3.91060000'], ['2529.00000000', '0.86940000'], ['2528.98000000', '1.30430000'], ['2528.96000000', '0.01870000'], ['2528.95000000', '4.16730000'], ['2528.94000000', '0.83010000'], ['2528.91000000', '0.39500000'], ['2528.90000000', '3.05530000'], ['2528.89000000', '2.13410000'], ['2528.86000000', '1.01650000'], ['2528.85000000', '3.00000000'], ['2528.82000000', '0.09770000'], ['2528.81000000', '8.96290000'], ['2528.75000000', '1.74220000'], ['2528.74000000', '1.14050000'], ['2528.73000000', '2.90000000'], ['2528.72000000', '1.78100000'], ['2528.69000000', '3.13800000'], ['2528.68000000', '1.61220000'], ['2528.67000000', '6.00500000'], ['2528.66000000', '9.97360000'], ['2528.65000000', '14.03010000'], ['2528.64000000', '0.75000000'], ['2528.61000000', '29.34770000'], ['2528.60000000', '1.43330000'], ['2528.59000000', '3.00000000'], ['2528.58000000', '1.49890000'], ['2528.57000000', '2.33900000'], ['2528.56000000', '4.43820000'], ['2528.55000000', '3.95650000'], ['2528.54000000', '0.01870000'], ['2528.52000000', '3.80860000'], ['2528.51000000', '1.00410000'], ['2528.49000000', '1.20000000'], ['2528.47000000', '0.06790000'], ['2528.41000000', '0.10000000'], ['2528.40000000', '1.51330000'], ['2528.39000000', '7.39700000'], ['2528.38000000', '8.00530000'], ['2528.37000000', '1.17470000'], ['2528.34000000', '1.37920000'], ['2528.33000000', '44.23930000'], ['2528.31000000', '19.29670000'], ['2528.28000000', '59.92180000'], ['2528.27000000', '1.49890000'], ['2528.26000000', '1.44790000'], ['2528.25000000', '16.91000000'], ['2528.24000000', '1.97660000'], ['2528.21000000', '1.43200000'], ['2528.19000000', '0.50000000'], ['2528.17000000', '0.79080000'], ['2528.14000000', '3.00000000'], ['2528.12000000', '0.01870000'], ['2528.11000000', '2.37300000'], ['2528.09000000', '1.52790000'], ['2528.02000000', '1.34900000'], ['2528.00000000', '1.29310000'], ['2527.99000000', '3.47680000'], ['2527.98000000', '0.01870000'], ['2527.97000000', '0.38000000'], ['2527.92000000', '22.81670000'], ['2527.91000000', '0.78030000'], ['2527.89000000', '1.55880000'], ['2527.88000000', '3.79190000'], ['2527.85000000', '0.77000000'], ['2527.84000000', '0.01870000'], ['2527.83000000', '3.80000000'], ['2527.81000000', '1.04930000'], ['2527.79000000', '6.23080000'], ['2527.78000000', '12.51680000'], ['2527.77000000', '3.42070000'], ['2527.76000000', '3.79190000'], ['2527.73000000', '2.30000000'], ['2527.70000000', '0.01870000'], ['2527.68000000', '7.62420000'], ['2527.67000000', '4.30200000'], ['2527.63000000', '23.66500000'], ['2527.59000000', '3.76300000'], ['2527.58000000', '4.77930000'], ['2527.57000000', '3.79190000'], ['2527.56000000', '0.01870000'], ['2527.55000000', '1.97720000'], ['2527.51000000', '3.00000000'], ['2527.48000000', '1.63490000'], ['2527.47000000', '1.04930000'], ['2527.46000000', '1.41490000']], 'asks': [['2529.56000000', '10.79930000'], ['2529.63000000', '0.92760000'], ['2529.69000000', '1.96360000'], ['2529.77000000', '0.18110000'], ['2529.82000000', '0.36280000'], ['2529.93000000', '3.53330000'], ['2529.97000000', '22.50000000'], ['2529.98000000', '0.31320000'], ['2530.03000000', '5.42090000'], ['2530.06000000', '7.82180000'], ['2530.07000000', '0.11860000'], ['2530.08000000', '0.01870000'], ['2530.11000000', '3.91010000'], ['2530.13000000', '11.15130000'], ['2530.21000000', '0.38400000'], ['2530.22000000', '1.42870000'], ['2530.24000000', '10.34790000'], ['2530.25000000', '1.51170000'], ['2530.26000000', '2.68900000'], ['2530.27000000', '2.07700000'], ['2530.28000000', '1.31770000'], ['2530.30000000', '0.50000000'], ['2530.31000000', '3.17500000'], ['2530.32000000', '1.40000000'], ['2530.35000000', '0.80620000'], ['2530.36000000', '0.01870000'], ['2530.38000000', '1.97670000'], ['2530.41000000', '0.39530000'], ['2530.46000000', '3.95660000'], ['2530.49000000', '3.09580000'], ['2530.50000000', '0.01870000'], ['2530.51000000', '23.68950000'], ['2530.52000000', '0.10000000'], ['2530.53000000', '2.33900000'], ['2530.58000000', '7.56800000'], ['2530.59000000', '1.48980000'], ['2530.61000000', '1.63950000'], ['2530.63000000', '15.90710000'], ['2530.64000000', '5.14690000'], ['2530.66000000', '1.97640000'], ['2530.67000000', '9.57680000'], ['2530.68000000', '1.23630000'], ['2530.70000000', '8.96540000'], ['2530.72000000', '1.43120000'], ['2530.73000000', '22.17860000'], ['2530.74000000', '0.29990000'], ['2530.76000000', '11.00000000'], ['2530.77000000', '13.37580000'], ['2530.78000000', '38.54590000'], ['2530.81000000', '1.36260000'], ['2530.82000000', '0.98740000'], ['2530.83000000', '0.79080000'], ['2530.84000000', '1.55820000'], ['2530.85000000', '1.47560000'], ['2530.86000000', '0.98740000'], ['2530.88000000', '0.19810000'], ['2530.89000000', '2.76710000'], ['2530.90000000', '1.53980000'], ['2530.92000000', '2.31870000'], ['2530.93000000', '8.76130000'], ['2530.94000000', '3.00000000'], ['2530.95000000', '3.00000000'], ['2530.96000000', '6.01710000'], ['2530.98000000', '11.49510000'], ['2530.99000000', '0.45710000'], ['2531.00000000', '15.48700000'], ['2531.02000000', '3.55590000'], ['2531.03000000', '1.41920000'], ['2531.06000000', '9.34140000'], ['2531.07000000', '1.39510000'], ['2531.15000000', '1.39120000'], ['2531.16000000', '18.06420000'], ['2531.17000000', '28.00310000'], ['2531.18000000', '9.96590000'], ['2531.20000000', '10.52770000'], ['2531.22000000', '1.76940000'], ['2531.24000000', '2.64880000'], ['2531.25000000', '1.18490000'], ['2531.27000000', '1.97710000'], ['2531.29000000', '3.47060000'], ['2531.30000000', '0.41240000'], ['2531.31000000', '5.70000000'], ['2531.34000000', '0.48160000'], ['2531.35000000', '12.09200000'], ['2531.36000000', '31.30770000'], ['2531.39000000', '0.20620000'], ['2531.40000000', '0.77000000'], ['2531.41000000', '10.66730000'], ['2531.45000000', '0.20630000'], ['2531.46000000', '9.79580000'], ['2531.47000000', '3.71080000'], ['2531.48000000', '0.01870000'], ['2531.49000000', '17.87250000'], ['2531.50000000', '1.47990000'], ['2531.51000000', '0.07900000'], ['2531.52000000', '1.55790000'], ['2531.53000000', '2.16280000'], ['2531.56000000', '10.62660000'], ['2531.57000000', '4.52600000'], ['2531.58000000', '30.45950000']]}


db = {
    "database": "binancedata",
    "user": "postgres",
    "password": "12341234",
    "host": "127.0.0.1",
    "port": "5432"
}

async def initDB():
    conn = await asyncpg.connect(**db)
    binance_table = """
    CREATE TABLE IF NOT EXISTS bdata (
        time TIMESTAMP,
        bids DOUBLE PRECISION[][],
        asks DOUBLE PRECISION[][]
    )
    """
    await conn.execute(binance_table)
    return conn


def convertFloat(record: list) -> list:
    for i in range(len(record)):
        record[i][0] = float(record[i][0])
        record[i][1] = float(record[i][1])
    return record


async def insertData(path: str, conn) -> None:
    with open(path, mode='r') as infile:
        raw_data = infile.readlines()
    
    json_data = []
    for line in raw_data:
        line = line.replace("\'","\"")
        json_data.append(json.loads(line))

    for record in json_data:
        query = """INSERT INTO bdata (
            time,
            bids,
            asks
        )
        VALUES (
            $1,
            $2,
            $3
        )
         """
        date = dt.datetime.utcfromtimestamp(record["lastUpdateId"])
        record["bids"] = convertFloat(record["bids"])
        record["asks"] = convertFloat(record["asks"])
        values = tuple([
            date,
            record["bids"],
            record["asks"]
        ])
        await conn.execute(query, *values)


async def main():
    conn = await initDB()
    await insertData(path='_binance.txt', conn=conn)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    